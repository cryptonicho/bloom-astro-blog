---
import '../styles/global.css';
import Header from '../components/Header.astro';

const { frontmatter } = Astro.props;
const { title, description, publishDate, author, tags = [], image } = frontmatter;
const canonicalURL = new URL(Astro.url.pathname, 'https://selfcareplanner.app');
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} | Bloom Self-Care Planner</title>
  <meta name="description" content={description}>
  <link rel="canonical" href={canonicalURL}>
  
  <!-- Favicons -->
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <link rel="shortcut icon" href="/bloom-favicon.png" />
  <meta name="theme-color" content="#ec4899" />
  
  <meta property="og:type" content="article">
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:url" content={canonicalURL}>
  {image && <meta property="og:image" content={image} />}
  <meta property="article:published_time" content={publishDate}>
  <meta property="article:author" content={author}>
  {tags.map((tag: string) => <meta property="article:tag" content={tag} />)}
  
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  {image && <meta name="twitter:image" content={image} />}
  
</head>
<body class="bg-gradient-to-br from-rose-50 via-pink-50 to-orange-50 min-h-screen">
  <Header />
  
  <main class="relative">
    <!-- Pink gradient borders on large screens -->
    <div class="hidden lg:block fixed top-0 left-0 w-32 h-full bg-gradient-to-r from-rose-100/50 to-transparent z-0"></div>
    <div class="hidden lg:block fixed top-0 right-0 w-32 h-full bg-gradient-to-l from-pink-100/50 to-transparent z-0"></div>
    
    <!-- Article content -->
    <article class="relative z-10 max-w-4xl mx-auto px-6 py-12 lg:py-16">
      <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
        <div class="p-8 md:p-12 lg:p-16">
          <header class="mb-10">
            <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-gray-900 leading-tight">{title}</h1>
          <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <time datetime={publishDate} class="publish-date" data-static-date={publishDate}>{new Date(publishDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</time>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              <span>{author}</span>
            </div>
          </div>
          {tags.length > 0 && (
            <div class="mt-4 flex flex-wrap gap-2">
              {tags.map((tag: string) => (
                <span class="px-3 py-1 text-xs font-medium bg-rose-100 text-rose-700 rounded-full">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </header>
        
        {image && (
          <div class="relative h-64 md:h-96 w-full mb-10 rounded-lg overflow-hidden">
            <img src={image} alt={title} class="w-full h-full object-cover" />
            <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
          </div>
        )}
        
        <div class="prose prose-lg prose-rose max-w-none
          prose-headings:font-bold prose-headings:text-gray-900
          prose-h2:text-2xl prose-h2:mt-8 prose-h2:mb-4
          prose-h3:text-xl prose-h3:mt-6 prose-h3:mb-3
          prose-p:text-gray-700 prose-p:leading-relaxed
          prose-a:text-rose-600 prose-a:no-underline hover:prose-a:underline
          prose-strong:text-gray-900
          prose-ul:my-4 prose-ol:my-4
          prose-li:text-gray-700
          prose-img:rounded-lg prose-img:shadow-lg
          prose-blockquote:border-l-4 prose-blockquote:border-rose-300 prose-blockquote:bg-rose-50 prose-blockquote:py-2 prose-blockquote:px-6 prose-blockquote:text-gray-700 prose-blockquote:italic
          prose-code:text-rose-600 prose-code:bg-rose-50 prose-code:px-1 prose-code:py-0.5 prose-code:rounded
          prose-pre:bg-gray-900 prose-pre:text-gray-100
          prose-table:border-collapse prose-table:w-full
          prose-th:bg-rose-50 prose-th:text-left prose-th:font-semibold prose-th:text-gray-900 prose-th:px-4 prose-th:py-2
          prose-td:border-t prose-td:border-gray-200 prose-td:px-4 prose-td:py-2">
          <slot />
        </div>
        
          <!-- Back to blog link -->
          <div class="mt-12 pt-8 border-t border-gray-200">
            <a href="/blog" class="inline-flex items-center gap-2 text-rose-600 hover:text-rose-700 font-medium transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Back to Blog
            </a>
          </div>
        </div>
      </div>
    </article>
  </main>

  <script>
    // Update publish date dynamically for posts that should show current date
    if (typeof window !== 'undefined') {
      document.addEventListener('DOMContentLoaded', () => {
        const publishDateElement = document.querySelector('.publish-date');
        const staticDate = publishDateElement?.getAttribute('data-static-date');
        
        // Check if this is the best-self-care-apps post by checking the URL
        if (window.location.pathname.includes('best-self-care-apps') && publishDateElement) {
          const currentDate = new Date();
          const currentYear = currentDate.getFullYear();
          const currentMonth = currentDate.getMonth();
          
          // Set to the 1st of current month
          const dynamicDate = new Date(currentYear, currentMonth, 1);
          
          publishDateElement.textContent = dynamicDate.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          });
          
          // Update the datetime attribute as well
          publishDateElement.setAttribute('datetime', dynamicDate.toISOString().split('T')[0]);
        }
      });
    }
  </script>
</body>
</html>